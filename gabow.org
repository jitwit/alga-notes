
* Gabow's Algorithm for Strongly Connected Components

** Overview

 The goal is to take a graph and compute its condensation. Gabow's
 path-based SCC algorithm computes strongly connected components by
 doing a preorder traversal of the graph, maintaining two stacks of
 vertices. The boundary stack is used to find representative vertices
 of components. The path stack is used to keep track of which vertices
 belong to these components.

 Like many graph algorithms, the path-based approach can be
 characterized by what to do when entering a vertex, following
 adjacent edges, and exiting. To compute the condensation, we also
 want to classify the edges in the process.

** Example

 The following image traces a run of the algorithm on the graph
 ~3*1*4*1*5~.  Key: For vertices, gray means unvisited, red means
 visited, and blue means assigned to a scc. The text is the vertex,
 the preorder id, and the assigned component id. Edges are colored
 black once they have been found to be edges in the condensation.

#+caption: Example
[[https://raw.githubusercontent.com/jitwit/alga-notes/master/images/gabow.png][3*1*4*1*5]]

** Details

 The core idea is that edges that point from vertices with higher
 preorder times to lower preorder times can induce cycles. The
 boundary stack is popped until the vertex not yet assigned to a
 component with the lowest reachable preorder id is on
 top. Representative vertices are discovered by looking at the
 boundary stack at exit. If the vertex being exited is found to also
 be at the top of the boundary stack, it represents the strongly
 connected component containing all the path stack up to itself.

*** Enter

 When a vertex is traversed, it is given a preorder id (entry time). A
 vertex has been visited iff it has been given a preorder id. Vertices
 are pushed to both the boundary and path stacks on entry.

*** Adjacent

 Let ~u~ be the current vertex. For each edge ~(u,v)~, the status of
 ~v~ determines what to do next.
 - ~v~ is not visited. ~v~'s search tree is traversed before ~u~'s
   (depth first, after all).
 - ~v~ is visited but has been assigned to a ~SCC~. There's nothing to
   do besides note that the ~u,v~ determines an edge between
   components ~scc[u],scc[v]~ in the condensation.
 - ~v~ has been visited but has not been assigned to a ~SCC~. This
   situation induces some cycle containing ~u~ and ~v~, and the
   boundary stack is updated to reflect this (any vertex with preorder
   id ~>pre[v]~ is popped.

*** Exit
 
 After exploring ~u~'s search tree, inspecting the boundary stack
 determines if ~u~ completes a new SCC. The key is that ~u~ is at the
 top of the boundary stack if and only if none of its children pointed
 to a vertex with a lower preorder id. ~u~ would have been popped from
 the boundary stack otherwise.

 When ~u~ is found to represent a SCC all vertices in the path stack
 up to ~u~ belong to it and are dropped from it. They are assigned to
 the current SCC id.

 If no new scc is completed, there's nothing to do. ~u~ is still a
 member of some SCC that will be represented by one of its
 ancestors and ~u~ is still in the path stack.

** Edge classification

 The search can be augmented by including a stack of edges analogous
 to the path stack. On exiting a vertex ~u~ which represents some SCC,
 inner edges from this stack are in the newly found component/vertex
 of the condensation when their minimum preorder id is greater or
 equal to that of ~u~. The rest belong to another component.
 
 In other words, edge ~(u,v)~ can be classified during the adjacent
 step like above:
 - ~v~ unvisited. Traversal continues from ~v~. ~u~ and ~v~ are in
   different components if and only if traversal from ~v~ completes a
   new SCC. Basically, ~v~ was at the top of the boundary stack iff
   none of its descendents pointed to an ancestor of it.
 - ~v~ visited and assigned to some SCC. ~(scc[u],scc[v])~ is an outer
   edge.
 - ~v~ visited but not assigned to some SCC. ~(u,v)~ is an inner edge.

** Haskell Implementation

*** Simplified version

  This version is simplified in that it ignores edge classification.

#+BEGIN_SRC haskell
gabowSCC :: Ord a => AdjacencyMap a -> State (StateSCC a) ()
gabowSCC g =
  do let dfs u = do enter u -- give u preorder id and push to stacks
                    forM_ (adjacent u) $ \v -> do -- for v in out edges
                      preorderId v >>= \case
                        Nothing  -> dfs v -- if v not seen, dfs v
                        Just p_v -> do
                          scc_v <- hasComponent v -- if v has not been assigned, adjust stacks
                          unless scc_v $ popBoundary p_v -- put reachable vertex with lowest preorder id on top
                    exit u -- maybe discover a new scc, maybe not.
     forM_ (vertexList g) $ \v -> do -- usual dfs of graph
       assigned <- hasPreorderId v
       unless assigned $ dfs v  -- vertex traversed iff it has(no)PreorderId
#+END_SRC

**** enter
  
  Note: ~pre~ is returned for use in classifying edges. if ~preorderId
  v~ is ~Nothing~ when considering edge ~(u,v)~, ~pre~ can tag the
  edge for later classfication from the edge path stack.

#+BEGIN_SRC haskell
enter v = do C pre scc bnd pth pres sccs gs es_i es_o <- get
             let !pre' = pre+1 -- new enter time counter
                 !bnd' = (pre,v):bnd -- push to boundary stack
                 !pth' = v:pth -- push to path stack
                 !pres' = Map.insert v pre pres -- update preorder/time table
             put $! C pre' scc bnd' pth' pres' sccs gs es_i es_o
             return pre 
#+END_SRC

**** popBoundary

  ~popBoundary~ can be called when considering edges ~(u,v)~. vertices
  with preorder id ~>p_v~ can't represent the enclosing component.

#+BEGIN_SRC haskell
popBoundary p_v = modify'
  (\(C pre scc bnd pth pres sccs gs es_i es_o) ->
     C pre scc (dropWhile ((>p_v).fst) bnd) pth pres sccs gs es_i es_o)
#+END_SRC


**** exit

  When a new compoent is found, this updates inner edges, outer edges,
  vertices of condensation graph, path stacks, scc id counter.

#+BEGIN_SRC haskell
exit v = do newComponent <- (v==).snd.head <$> gets boundary
            when newComponent $ insertComponent v
            return newComponent

insertComponent v = modify'
  (\(C pre -- preorder id/entry time counter
       scc -- scc id counter
       bnd -- boundary stack
       pth -- path stack
       pres -- preorder table
       sccs -- scc id table
       gs -- vertices of condensation, indexed by scc id
       es_i -- inner edge path stack, popped section to be put in gs table 
       es_o -- outer edges. to be used after traversal to condense graph
       ) ->
     let gs' = IntMap.insert scc g_i gs -- insert subgraph in condensation table
         sccs' = List.foldl' (\sccs x -> Map.insert x scc sccs) sccs curr -- give vertices up to v in path stack a new SCC id
         scc' = scc + 1 -- new SCC id
         bnd' = tail bnd -- pop boundary stack
         p_v = fst $ head bnd -- lowest time/preorder id in new scc is top of stack
         g_i = fromList (vertex <$> curr) <> fromList (uncurry edge.snd <$> es) -- new subgraph/condensation vertex
         (es,es_i') = span ((>=p_v).fst) es_i -- split inide edges based on preorder id
         pth' = tail $ dropWhile (/=v) pth -- pop vertices in completed component up to and including v
         curr = v:takeWhile(/=v) pth -- these vertices form the newly completed SCC
      in C pre scc' bnd' pth' pres sccs' gs' es_i' es_o)
#+END_SRC

** Gabow with edge classification

 The full/messy version, including edge classification:

#+BEGIN_SRC haskell
gabowSCC :: AdjacencyIntMap -> State StateSCC ()
gabowSCC g =
  do let adjacent = IntSet.toList . flip postIntSet g -- avoid list possible?
         dfs u = do p_u <- enter u -- grab current time for edge classification
                    forM_ (adjacent u) $ \v -> -- for (u,v):
                      preorderId v >>= \case
                        Nothing  -> do -- v not visited
                          updated <- dfs v
                          if updated -- if v formed new SCC
                            then outedge (u,v) -- (u,v) outside edge
                            else inedge (p_u,(u,v)) -- else (u,v) inside edge
                        Just p_v -> do -- v visited:
                          scc_v <- hasComponent v
                          if scc_v -- if v already assigned component
                            then outedge (u,v) -- then (u,v) outside
                            -- else update boundary and put edge (u,v) in edge path stack analogue 
                            -- where some inside edges go in next found scc, but possibly not all
                            else popBoundary p_v >> inedge (p_v,(u,v))
                    exit u -- check to see if u forms new component
     forM_ (vertexList g) $ \v -> do
       assigned <- hasPreorderId v
       unless assigned $ void $ dfs v
#+END_SRC


